Page 1
SCADA-, MES- und OPC UA-Server im industriellen
Einsatz
SCADA-Server (Supervisory Control and Data Acquisition)
Ein  SCADA-Server  ist  das  Herz  eines  SCADA-Systems  zur  Überwachung  und  Steuerung  industrieller
Prozesse .  Er  sammelt  in  Echtzeit  Daten  von  Steuerungen  (SPS/PLCs,  RTUs)  und  visualisiert  sie  für
Bediener  über  HMIs ,  ermöglicht  also  das  Beobachten  von  Anlagenwerten  und  das  Eingreifen  in
Prozesse .  Typische  Funktionen  eines  SCADA-Servers  umfassen:  Prozessdaten  erfassen , 
Steuerbefehle  senden  (z. B.  Ventile  öffnen/schließen,  Sollwerte  setzen),  Alarmierung  bei
Grenzwertverletzungen ,  Historisierung  von  Messwerten  und  Trendanzeigen  zur  Analyse .  Der
SCADA-Server läuft meist auf Industrie-PCs oder virtuellen Maschinen und verbindet die Feldgeräte mit der
Leitebene.  Er  stellt  zentralisierte  Bedienoberflächen  und  Leitstände  bereit  und  ermöglicht  es  dem
Personal, den Anlagenzustand standortübergreifend zu überwachen und zu steuern , was die Effizienz
und Sicherheit steigert . Kurz gesagt: SCADA-Server arbeiten auf der Prozessebene (ISA-95 Level
2) und dienen der Echtzeit-Prozessführung und -Datenerfassung  auf Anlagenebene .
MES-Server (Manufacturing Execution System)
Ein  MES-Server  ist  eine  übergeordnete  Instanz  auf  Produktionsleitebene  (ISA-95  Level  3) ,  die  die
Fertigung operativ verwaltet und zwischen Werkhalle und Unternehmens-IT (ERP) vermittelt. MES-Systeme
gehen  über  SCADA  hinaus ,  indem  sie  Produktionsaufträge  detailliert  planen,  Abläufe  verfolgen,
Qualitätssicherung durchführen und Produktionskennzahlen auswerten . Der MES-Server sammelt
dafür laufend Daten vom Shopfloor (z. B. Maschinenzustände, Stückzahlen, Taktzeiten) – oft in Echtzeit  – um
den Fertigungsfortschritt zu überwachen  und bei Abweichungen einzugreifen. Er stellt Dienste bereit wie
Feinplanung der Produktion, Ressourcen- und Materialverwaltung, Leistungsauswertung (OEE/KPI)
und Rückverfolgung von Chargen. Ein MES-Server  bildet das “digitales Rückgrat” der Fertigung  und
sorgt für die Einhaltung von Produktionsplänen und Qualitätsvorgaben . Dazu  integriert er sich mit
der Automatisierungsebene : typischerweise über Schnittstellen oder Protokolle wie OPC UA, Modbus oder
Ethernet/IP bezieht das MES Maschinendaten von SCADA/PLC  und kann umgekehrt Fertigungsaufträge
oder Rezepturinformationen an die Steuerung senden . So fungiert ein MES-Server als  Bindeglied
zwischen  Betriebsleitung  und  Maschinensteuerung ,  indem  er  die  vom  ERP  vorgegebenen  Aufträge
operationalisiert und deren Ausführung auf der Anlage überwacht.
OPC UA-Server (Open Platform Communications – Unified
Architecture)
Ein  OPC UA-Server  ist  kein  Leitstand  im  klassischen  Sinn ,  sondern  eine  Standard-
Kommunikationsschnittstelle  in der industriellen Automatisierung. Er dient dazu, Maschinendaten und -
dienste einheitlich für Client-Anwendungen bereitzustellen . In der OPC-UA-Architektur agiert der Server
typischerweise auf einem Gerät oder Gateway und exponiert dessen Datenpunkte (z. B. Sensorsignale,12
2
34
5
6
6
7
1

Page 2
Aktorzustände, Steuerungsvariablen) in einem standardisierten objektorientierten Informationsmodell .
OPC UA-Server  ermöglichen  OPC-UA-Clients  –  etwa  SCADA-Systemen  oder  MES  –  einen  sicheren
Zugriff  auf  Automatisierungsdaten .  Über  einen  OPC UA-Server  können  Clients  Daten  lesen , 
schreiben ,  Alarme/Ereignisse abonnieren  oder sogar  Methoden auf dem Gerät ausführen , alles über
ein  herstellerneutrales  Protokoll.  OPC UA  ersetzt  damit  proprietäre  Treiber  durch  eine
plattformunabhängige,  interoperable  Lösung.  Praktisch  bedeutet  dies:  Ein  Sensor  oder  eine  SPS  mit
integriertem  OPC UA-Server  kann  direkt  mit  einer  übergeordneten  SCADA-  oder  MES-Software
kommunizieren.  Siemens  beispielsweise  nutzt  OPC UA  als  offene  Schnittstelle  von  der
Steuerungsebene  zu  SCADA-,  MES-  und  ERP-Systemen  bis  in  die  Cloud .  Die  Daten  werden  im
OPC UA-Server  strukturiert  angeboten  (inkl.  Semantik  durch  Namespaces  und  NodeIDs ),  wodurch
unterschiedliche Clients ein gemeinsames Verständnis der Daten haben. Wichtig ist, dass ein OPC UA-Server
eine Softwarekomponente ist (kein physischer Server)  – er läuft entweder eingebettet auf dem Gerät
oder als separate Middleware . Zusammengefasst ist der OPC UA-Server der “Datenverteiler” : Er stellt
Echtzeitdaten, historische Werte oder Alarmmeldungen  standardisiert zur Verfügung, jedoch ohne selbst die
übergeordnete Logik eines SCADA oder MES zu implementieren.
Zusammenspiel und Abgrenzung
SCADA und MES erfüllen unterschiedliche Funktionen und greifen doch ineinander . Der SCADA-Server
arbeitet nahe an der Maschine und gewährleistet den laufenden Betrieb: Er erfasst Messwerte, steuert
Aggregate und alarmiert bei Störungen in Sekundenbruchteilen. Das MES dagegen koordiniert auftrags-
und qualitätsbezogene Aspekte  der Fertigung: Es entscheidet  was,  wann  und  wie viel  produziert wird,
basierend auf Geschäftsaufträgen, und optimiert Abläufe für Effizienz und Qualität . Dadurch ergänzt
das MES die SCADA-Ebene – es nutzt die von SCADA gelieferten Echtzeitdaten, um den Produktionsplan
laufend an den Ist-Zustand anzupassen. Ein MES kann z. B. erkennen, dass eine Maschine (per SCADA-
Daten) unter ihrer Soll-Leistung läuft, und wird daraufhin Anpassungen vornehmen (etwa Umplanen von
Aufträgen oder Auslösen von Wartung). Der Informationsfluss  ist dabei bidirektional: Das MES empfängt
von  SCADA  die  Maschinenzustände  und  Produktionsfortschritte  und  sendet  umgekehrt
Steuerinformationen wie Fertigungsaufträge oder Rezeptwechsel an die Anlagensteuerung . Oft
erfolgt dies nicht  direkt SCADA-zu-MES, sondern über standardisierte Schnittstellen – hier kommt OPC UA
als Vermittler ins Spiel . OPC UA-Server auf der Steuerungs- oder SCADA-Ebene stellen die notwendigen
Daten für beide Seiten bereit.  In der Praxis managt OPC UA den Datenaustausch zwischen den MES-
und SCADA-Informationssystemen und den niedriger gelagerten Geräten . So kann beispielsweise
sowohl  ein  SCADA-System  als  auch  ein  MES  gleichzeitig  auf  denselben  OPC UA-Server  einer  SPS
zugreifen ,  ohne  proprietäre  Protokolle.  OPC UA  sorgt  dafür ,  dass  alle Beteiligten  im
Automatisierungspyramidennetz  eine  gemeinsame  “Sprache”  sprechen  und  Zugriffsrechte  sowie
Sicherheit (Verschlüsselung, Authentifizierung) standardisiert umgesetzt sind. 
Funktional grenzen sich die drei Servertypen also wie folgt ab: SCADA-Server  sind prozessnah  und bieten
vollständige  Leit-  und  Visualisierungsfunktionen  für  Bediener  (inklusive  Datenpersistenz  und
Alarmmanagement).  MES-Server  sind  produktionsnah  und  bieten  umfassende  MES-Funktionen
(Produktionsplanung,  Betriebsdatenerfassung,  Qualitätsmanagement,  Reporting)  auf  Basis  der
gesammelten Prozessdaten. OPC UA-Server  wiederum bieten datennahe  Dienste – sie stellen die Roh- und
Zustandsdaten bereit und ermöglichen den Datentransport zwischen den Ebenen, haben aber keine eigene
Visualisierung oder Produktionslogik. Während SCADA und MES also komplexe Anwendungen  mit UI und
Logik sind, ist OPC UA ein  Kommunikationsserver . Keiner ersetzt den anderen: Vielmehr  arbeiten sie
zusammen ,  um  vom  Sensor  bis  zum  ERP  eine  durchgängige  Informationskette  zu  bilden.  Moderne8
9
8
6
7
10
2

Page 3
Industrie-4.0-Architekturen nutzen alle drei: Maschinen liefern per OPC UA ihre Daten ans SCADA (für die
Operatoren) und ans MES (für die Management-Ebene), wobei MES und SCADA sich via OPC UA über den
aktuellen Status austauschen und reibungslos zusammenwirken . 
Struktur von SNMP-Datenpaketen
SNMP-Grundlagen und Datenübertragung
SNMP (Simple Network Management Protocol) ist ein anfragebasiertes Netzwerkprotokoll  im Manager/
Agent-Modell.  Ein  zentrales  Managementsystem  (Manager)  kommuniziert  über  SNMP-Nachrichten  mit
verteilten Geräten (Agenten), typischerweise über UDP-Port 161/162.  SNMP-Daten werden in Form von
Protokolldateneinheiten (PDUs) übertragen , die Anfragen (z. B.  Get,  Set) oder Antworten ( Get-Response )
enthalten .  Die  gesamte  SNMP-Nachricht  –  einschließlich  Versionskennung,  Adressierung
(Community-String bei v1/v2c bzw. Benutzer/Sicherheit bei v3), PDU-Typ, Fehlerstatus etc. – ist in  ASN.1-
Strukturen definiert und nach den Basic Encoding Rules (BER) binär codiert . Die BER-Codierung
folgt einem  Type-Length-Value (TLV)  Schema: Jedes Datenfeld besteht aus einem Typkennzeichen, einer
Längenangabe und dem Wert in Bytes . Alle SNMP-Daten werden so in eine plattformunabhängige
Bytefolge  übersetzt,  was  sicherstellt,  dass  jeder  Agent  und  Manager  die  empfangenen  Bytes  korrekt
interpretieren kann . Beispiel:  Die Zahl 9336 würde im Kontext einer SNMP-Anfrage als Hex-Bytefolge
02 02 24 78  übertragen – hierbei gibt 02 den Datentyp Integer  an, 02 die Länge (2 Bytes) und 24 
78 den Wert (9336 in Big-Endian) . Diese Binärcodierung geschieht vollständig transparent für den
Anwender; Management-Tools zeigen die Werte in lesbarer Form an, aber auf der Leitung sind es bytes und
Bitfolgen.  Kurz  gesagt,  SNMP  überträgt  Daten  binär  codiert  nach  ASN.1/BER ,  was  eine  einheitliche
Interpretation gewährleistet .
OID-Wert-Paare und VarBind-Liste
Der Kern einer SNMP-PDU ist die Variable Binding List (VarBind-Liste)  – praktisch eine flache Liste von OID-
Wert-Paaren . Jeder  VarBind  enthält  zwei Felder : (1) einen  Object Identifier (OID) , der einen bestimmten
Parameter adressiert, und (2) den Wert  dieses Parameters . Die VarBind-Liste ist einfach eine Sequenz
solcher OID-Wert-Paare  (bei einer Anfrage kann die Liste auch nur ein einziges Paar enthalten) . Dieses
Design  macht  SNMP-Nachrichten  sehr  schlicht:  Es  werden  lediglich  die  angeforderten/gesendeten
Objekte  linear  aufgezählt ,  ohne  weitere  Verschachtelung.  Eine  OID  ist  dabei  eine  hierarchische
Kennung ,  dargestellt  als  durch  Punkte  getrennte  Zahlensequenz  (z. B.
1.3.6.1.4.1.2680.1.2.7.3.2.0 ) .  Jeder  SNMP-verwaltete  Parameter  im  Gerät  (Agent)  hat  eine
solche eindeutige OID, die in der Management Information Base (MIB)  des Geräts definiert ist. Die MIB
fungiert  als  “Adressbuch”  aller  Objekte  und  hält  zu  jedem  Eintrag  Name,  OID,  Datentyp,
Zugriffsbeschränkung (read-only/read-write)  und Beschreibung bereit . Der Manager kennt durch die
MIB, welche OIDs für welche Messwerte oder Einstellungen stehen – z. B. könnte  1.3.6.1.2.1.1.5.0
die  Systemname -Variable eines Geräts adressieren. Fragt der Manager diese OID ab (GetRequest), schickt
der Agent im GetResponse die OID zusammen mit dem aktuellen Wert zurück als VarBind. Die OID dient
also als eindeutige Adresse für jedes Management-Objekt , und der dazugehörige Wert liefert den Inhalt/
Zustand  dieses Objekts. Dieses Konzept einer flachen OID-Wert-Liste bedeutet, dass SNMP keine komplex
verschachtelten  Datenstrukturen  transportiert ,  sondern  viele  Einzeldatenpunkte,  was  die
Implementierung vereinfacht. Tabellen (wie z. B. Routing-Tabellen) werden in SNMP durch mehrere VarBinds10
1112
12
13
1415
16
12
17
18
19
20
3

Page 4
repräsentiert, indem indexierte OIDs verwendet werden – aber letztlich bleibt es eine Liste von einzelnen
OID->Wert Einträgen.
Werte und Datentypen in SNMP
SNMP-Werte werden gemäß ihrem ASN.1-Datentyp als Binärdaten übertragen , können jedoch je nach
Typ  numerische  oder  textuelle  Informationen  repräsentieren.  Zu  den  grundlegenden  SNMP-Datentypen
zählen z. B.: INTEGER  (Ganzzahl, typischerweise 32 Bit , in SNMPv2 erweitert um 64-Bit Counter), OCTET
STRING  (Bytefeld  für  beliebige  binäre  oder  textuelle  Daten) ,  OBJECT  IDENTIFIER  (Objektkennung,
Sequenz  von  Sub-IDs) ,  IpAddress  (IPv4-Adresse,  4   Bytes),  Counter32/Counter64  (Zähler ,  der  bei
Überlauf wrappt) und  Gauge32  (Wert in festem Bereich, nicht wraparound),  TimeTicks  (Zeitintervall in
Hundertstelsekunden) . Zusätzlich gibt es spezielle Typen wie  Null  (für nicht vorhandene Werte)
oder Opaque  (für undurchsichtig eingebettete Daten, deprecated) . Werte  werden immer in einer dieser
ASN.1-Formen  übertragen  –  z. B.  wird  eine  Temperatur  von  85  °C  als  INTEGER  (Wert  85)  codiert,  ein
Gerätestatus vielleicht als INTEGER mit vordefinierten Konstanten, eine Seriennummer als OCTET STRING
mit ASCII-Text. Für den Benutzer können solche Werte also menschenlesbar  sein (wenn der Datentyp z. B.
ein  Text-String  ist  oder  ein  Integer  eine  bekannte  Bedeutung  hat),  aber  auf  Protokollebene  sind  es
Binärdaten  in BER-TLV-Form. Ein SNMP-Agent wandelt interne Werte (unabhängig von Endianess, Datentyp
der Firmware etc.) in den standardisierten ASN.1-Typ um und der Manager zurück in lesbare Form .
Dieser Ansatz gewährleistet Plattformunabhängigkeit – unterschiedliche Systeme können SNMP nutzen,
ohne sich um interne Darstellungsdetails kümmern zu müssen . Zusammengefasst: Die Werte werden
als Binärdaten übertragen , aber  gegebenenfalls als Text oder Zahlen interpretiert . SNMP transportiert somit
Zustands- und Messdaten (meist numerisch) sowie auch Strings  – z. B. liefert das Objekt sysName.0  den
Gerätenamen als OctetString (der typischerweise lesbaren ASCII-Text enthält), hingegen  ifSpeed  eine Zahl
(Bits/s) als INTEGER. Für Steuerinformationen (bei SNMP Set-Operationen) gilt das gleiche Prinzip: Der neue
Wert wird vom Manager im passenden Datentyp ans Gerät geschickt. 
SNMP-Versionen v1, v2c und v3 im Vergleich
SNMP existiert in mehreren Versionen, die zwar vom Grundprinzip gleich sind (Manager-Agent-Modell, OID-
Wert-Paare), sich aber in Leistungsumfang und Sicherheit unterscheiden.  SNMPv1 (1988)  war die erste
Version: Sie bietet  grundlegendes Monitoring , nutzt einen einfachen Community-String als primitiven
Authentifizierungsmechanismus und unterstützt nur  32-Bit Counter  für Zählerwerte . Eine SNMPv1-
Nachricht enthält den Klartext-Community-Namen, die Versionsnummer und die PDU mit VarBinds – es gibt
keine  Verschlüsselung  oder  Nutzerverwaltung .  Zudem  hatte  v1  einen  eigenen  Trap-PDU-Typ  mit  festen
Feldern. SNMPv2c (1993)  ist die gängigste Variante der zweiten Generation (das “c” steht für community ):
Funktional  brachte  v2  leistungsfähigeres  Monitoring  durch  64-Bit-Zähler  (wichtig  für  schnelle
Schnittstellen, damit Zähler nicht ständig überlaufen) , zusätzliche PDU-Typen ( GetBulk  für effizientes
Auslesen mehrerer Werte, Inform  für Quittungs-Traps) und verbessertes Fehlerhandling. Allerdings blieb v2c
bei dem  unsicheren Community-String ohne Verschlüsselung  – d. h. Authentifizierung weiterhin nur
durch ein Passwort im Klartext, was inhärent abhör- und fälschungsanfällig ist . In SNMPv2 wurde auch
das  Trap-Format  an  die  allgemeine  VarBind-Struktur  angepasst  (v2-Traps  senden  z. B.  sysUpTime  und
trapOID  als  Teil  der  VarBind-Liste).  SNMPv3  (1998)  schließlich  adressiert  die  Sicherheitslücken  der
Vorgänger . Es führt ein  User-Based Security Model  (USM) ein, bei dem  Benutzeraccounts mit Passwort/
Auth-Keys  verwendet werden und Daten  authentifiziert und verschlüsselt  übertragen werden können
. Eine SNMPv3-Nachricht verzichtet auf den Community-String; stattdessen enthält sie einen  Header
mit  Versionsnummer=3,  Sicherheitsparametern  (Username,  Authentifizierungs-Tags,  evtl.21
22
23
2425
26
2728
29
30
30
31
32
4

Page 5
Initialisierungsvektor für Encryption)  sowie eine ggf. verschlüsselte PDU. Der inhaltliche Aufbau der PDU
(mit OID-Wert-Paaren) bleibt ähnlich wie in v2 , aber v3 bietet  Nachrichtenschutz gegen Lauschen
oder  Manipulation .  Durch  Privacy  (AES/DES-Verschlüsselung)  und  Authentication  (MD5/SHA  Hash)
sowie  Access  Control  (VACM)  eignet  sich  SNMPv3  auch  für  sicherheitskritische  Netze.  Allerdings  ist  v3
komplexer in Konfiguration (Benutzer einrichten, Schlüssel verteilen) und hat etwas mehr Overhead. In der
Praxis werden  v1/v2c heute vor allem in internen, vertrauenswürdigen Netzwerken  eingesetzt, wo
Einfachheit  vor  Sicherheit  steht,  während  SNMPv3  für  öffentliche/unsichere  Netze  oder  höhere
Sicherheitsanforderungen  empfohlen  wird .  Wichtig  für  alle  Versionen:  Das  grundlegende
Kommunikationsmodell  (Requests/Responses  mit  VarBind-Listen)  ist  gleich,  Unterschiede  liegen  in
zusätzlichen PDU-Typen (v2) und Sicherheits-Wrappern (v3) . 
Industrielle Anwendungen von SNMP (Messdaten, Steuerinfos,
Alarme)
SNMP wird klassisch in der IT zur Überwachung von Netzwerkgeräten (Router , Switches, Server) genutzt –
doch  auch  in  industriellen  Umgebungen  findet  es  Anwendungen,  insbesondere  für  übergeordnete
Geräte- und Infrastrukturüberwachung . In Produktionsanlagen können z. B.  Steuerungen, Antriebe,
Sensor-Gateways  oder  Energieverteiler  mit  SNMP-Agent  ausgestattet  sein ,  um  Zustandsdaten  an
zentrale  Monitoring-Systeme  zu  melden.  Messdaten :  SNMP  eignet  sich,  um  Umgebungs-  und
Betriebsdaten  aus  heterogenen  Quellen  auf  einer  einheitlichen  Plattform  zu  sammeln  –  etwa
Temperaturen, Spannungen, CPU-Auslastungen, Durchflussraten u.v.m. von verschiedenen Geräten . So
könnten  z. B.  in  einem  Werk  alle  Steuerungsschränke  mit  Temperatur-  und  Lüftersensoren  überwacht
werden;  jeder  Sensorcontroller  stellt  seine  Werte  per  SNMP  bereit,  und  ein  zentrales  System  pollt
regelmäßig die Temperaturen, um Trends zu erkennen.  Steuerinformationen : Obwohl SNMP primär für
Monitoring gedacht ist, kann mittels Set-Befehlen  auch in begrenztem Umfang Einfluss genommen werden –
etwa  zum  Fernkonfigurieren  eines  Geräts  (z. B.  Schwellenwert  in  einem  Sensor  ändern)  oder  zum
Auslösen  einfacher  Aktionen  (z. B.  Neustart  einer  Netzwerkkomponente  über  SNMP-Befehl).  In  der
industriellen Praxis wird SNMP jedoch selten für zeitkritische Regelungsbefehle verwendet, da es auf UDP
basiert  und  kein  deterministisches  Verhalten  garantiert.  Alarme :  Sehr  verbreitet  ist  SNMP  für
Störmeldungen und Alarmmanagement . Geräte können sogenannte Traps  (oder v2 Inform -Nachrichten)
an einen Manager senden, sobald ein bestimmtes Ereignis eintritt – z. B. Übertemperatur , Netzteilausfall,
Kommunikationsverlust.  In  Industrieanlagen  können  z. B.  SPS-basierte  Systeme  SNMP-Traps  an  das
Leitsystem schicken, wenn sie einen Anlagenfehler detektieren, oder ein USV-System meldet Netzausfall per
SNMP-Trap an die Leitwarte. Diese  Ereignisübermittlung in Echtzeit  erlaubt es,  proaktiv  einzugreifen,
ohne  auf  Polling  warten  zu  müssen .  Ein  Vorteil  von  SNMP  ist  die  einheitliche  Überwachung
unterschiedlicher Gerätetypen : Solange alle Geräte SNMP unterstützen, kann ein zentrales System sie
gemeinsam managen  – beispielsweise parallel Netzwerk-Switches, speicherprogrammierbare Steuerungen
und IP-Kameras , was sonst separate Tools erfordern würde. 
Typische Beispiele:  In einem Automobilwerk wurden über  100 Schweißroboter via SNMP überwacht ,
indem jeder Roboter-Gateway Statusdaten wie Temperatur und Versorgungsspannung als SNMP-Parameter
bereitstellte. Die Daten flossen in ein zentrales Analysesystem mit Machine-Learning-Modell ein, das aus
den historischen SNMP-Daten drohende Ausfälle vorhersagte – so konnte ungeplante Stillstandszeit um
60 % reduziert werden . Ein anderes Beispiel ist die Energieüberwachung:  Viele intelligente Stromzähler
oder Energie-Monitoring-Geräte  in Fabriken sprechen SNMP. Deren Messwerte (Verbrauch, Stromstärke usw.)
können per SNMP regelmäßig ausgelesen werden. In einer Elektronikfabrik etwa wurden so Leistungsdaten32
3332
34
34
34
35
5

Page 6
von Smart Metern erfasst und im MES ausgewertet, um Maschinen-Ein/Aus-Zeiten dynamisch anzupassen –
Ergebnis war ~15 % Energieeinsparung pro Jahr . Auch Gebäudetechnik  lässt sich integrieren: Man findet
SNMP-Unterstützung z. B. in Klimaanlagensteuerungen oder Sicherheitssystemen, was eine Kopplung mit
SCADA  ermöglicht  (teils  über  SNMP-BACnet/MODBUS-Gateways ).  Zudem  nutzen  manche  SCADA-
Systeme SNMP selbst, um ihre Serverhardware oder Netzwerkkomponenten zu überwachen (sog. Watching
the  watcher  Prinzip).  Insgesamt  ist  SNMP  in  der  Industrie  vor  allem  ein  Hilfsprotokoll  für
Zustandserfassung und Alarmierung  – weniger zur Regelung von Echtzeitprozessen, aber sehr wertvoll
zur  Überwachung  von  Anlagenkomponenten,  IT-Infrastruktur  in  Produktionsnetzen  und
umgebender Technik . Durch Standard-SNMP-Traps können industrielle Leitstände auch  Störungen von
sonst  unverbundenen  Systemen  (z. B.  ein  Brandmelder  oder  ein  Router-Ausfall)  ins
Alarmmanagement übernehmen , ohne proprietäre Kopplungen. Die Einfachheit und Verbreitung von
SNMP machen es zu einem nützlichen Werkzeug, um im Sinne von Industrie 4.0 alle „Assets“ – von der
Maschine bis zur IT – in ein ganzheitliches Überwachungsnetz einzubinden.
Quellen:  Die Erklärungen basieren auf aktuellen Fachartikeln und Standards, u. a. Inductive Automation
(SCADA) ,  Symestic  (MES  vs.  SCADA) ,  Paessler/PRTG  (OPC UA) ,  Reddit/r/PLC
Erfahrungsberichte  (SCADA-Architektur) ,  sowie  SNMP-Expertenquellen  von  RANE,  Paessler  und
PUSR (SNMP Struktur und Industrieeinsatz) . Diese beleuchten die jeweiligen Rollen, technischen
Details und Anwendungsfälle der genannten Systeme umfassend. 
What is SCADA? Supervisory Control and Data Acquisition
https://inductiveautomation.com/resources/article/what-is-scada
SCADA Hardware : r/PLC
https://www.reddit.com/r/PLC/comments/1az5r73/scada_hardware/
FAQ: The 100 most important questions about MES systems
https://www.symestic.com/en-us/blog/the-100-most-important-questions-about-mes-systems
What Is OPC UA? – IT Explained | PRTG
https://www.paessler .com/it-explained/opc-ua
OPC UA Server & MQTT Publisher Gateway for SIMATIC S7 Controllers | Softing
https://industrial.softing.com/us/products/gateways/gateways-for-access-of-controller-data/uagate-si.html
SNMP: Simple? Network Management Protocol
https://www.ranecommercial.com/legacy/note161.html
If You Use SNMP a Lot and Don't Know What SMI Is, Then
Read This!
https://blog.paessler .com/snmp-deep-dive-how-smi-contributes-to-snmp
SNMP Versions: V1, V2c, or V3 — Which is Best for Your Network Security? | LogicMonitor
https://www.logicmonitor .com/blog/whats-with-the-different-snmp-versions-s1-v2c-v3
In-Depth Analysis of SNMP Monitoring Functionality in Industrial Gateways
https://www.pusr .com/blog/In-Depth-Analysis-of-SNMP-Monitoring-Functionality-in-Industrial-Gateways?sw-lang=Enns36
37
34 38
1 2 5 7 8 10
4 39
19 13 34
1 2
3 439
5 6 7
810
9
11 12 17 18 19 20
13 14 15 16 21 22 23 24 25 26 27 28 29
30 31 32
33 34 35 36 37 38
6